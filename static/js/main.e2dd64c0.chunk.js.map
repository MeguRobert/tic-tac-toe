{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","Button","variant","className","style","color","fontSize","backgroundColor","border","onClick","value","Board","renderSquare","i","squares","Game","useState","history","Array","fill","stepNumber","xIsNext","state","setState","turn","current","length","winner","calculateWinner","status","moves","map","step","move","desc","jumpTo","slice","squareList","concat","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"gLAEe,SAASA,EAAOC,GAS3B,OACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,UAAU,SAASC,MARpC,CACXC,MAAO,UACPC,SAAU,OACVC,gBAAiB,UACjBC,OAAQ,aAIsDC,QAAST,EAAMS,QAA7E,SACST,EAAMU,QCVR,SAASC,EAAMX,GAE1B,IAAMY,EAAe,SAACC,GAClB,OACI,cAACd,EAAD,CACIW,MAAOV,EAAMc,QAAQD,GACrBJ,QAAS,kBAAMT,EAAMS,QAAQI,OAMzC,OACE,gCACE,sBAAKV,UAAU,YAAf,UACGS,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKT,UAAU,YAAf,UACGS,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKT,UAAU,YAAf,UACGS,EAAa,GACbA,EAAa,GACbA,EAAa,SCzBT,SAASG,IAEpB,MAA0BC,mBACtB,CACIC,QAAS,CAAC,CAACH,QAASI,MAAM,GAAGC,KAAK,QAClCC,WAAY,EACZC,SAAS,IAJjB,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAOF,EAAMD,QAAU,IAAM,IAC7BI,EAAUH,EAAML,QAAQK,EAAML,QAAQS,OAAS,GAC/CC,EAASC,EAAgBH,EAAQX,SACjCe,EAASF,EAAS,kBAAoBA,EAAS,gBAAkBH,EAEjEM,EAAQR,EAAML,QAAQc,KAAI,SAACC,EAAMC,GACrC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBAOF,OACE,6BACE,cAAChC,EAAA,EAAD,CAAQC,QAAQ,YAAYE,MAPf,CACXC,MAAO,UACPC,SAAU,SACVC,gBAAiB,WAIwBE,QAAS,kBAAM0B,EAAOF,IAAjE,SAAyEC,KADlED,MAsBPE,EAAS,SAACH,GACZT,EAAS,CACLN,QAASK,EAAML,QAAQmB,MAAM,EAAGJ,EAAO,GACvCZ,WAAYY,EACZX,QAAUW,EAAO,IAAO,KAKhC,OACE,sBAAK7B,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,UACE,8BAAM0B,IACN,6BAAKC,OAEP,qBAAK3B,UAAU,aAAf,SACE,cAACQ,EAAD,CACEG,QAASW,EAAQX,QACjBL,QAjCY,SAACI,GACjB,IAAMI,EAAUK,EAAML,QAAQmB,MAAM,EAAGd,EAAMF,WAAa,GACpDK,EAAUR,EAAQA,EAAQS,OAAS,GACnCW,EAAaZ,EAAQX,QAAQsB,QAC/BT,GAAUF,EAAQX,QAAQD,KAG9BwB,EAAWxB,GAAKW,EAChBD,EAAS,CACLN,QAASA,EAAQqB,OAAO,CAAC,CAACxB,QAASuB,KACnCjB,WAAYH,EAAQS,OACpBL,SAAUC,EAAMD,mBA8B5B,IAAMO,EAAkB,SAACd,GAWjB,IAVA,IAAMyB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF1B,EAAI,EAAGA,EAAI0B,EAAMb,OAAQb,IAAK,CACnC,kBAAkB0B,EAAM1B,GAAxB,GAAO2B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACtE,OAAO5B,EAAQ0B,GAGvB,OAAO,MCxFXG,IAASC,OACP,cAAC7B,EAAD,IACA8B,SAASC,eAAe,U","file":"static/js/main.e2dd64c0.chunk.js","sourcesContent":["import '../index.css';\r\nimport Button from '@material-ui/core/Button';\r\nexport default function Square(props) {\r\n\r\n    const styles = {\r\n        color: \"#47d7df\",\r\n        fontSize: '8rem',\r\n        backgroundColor: \"#4793df\",\r\n        border: \"1px solid\"\r\n    }\r\n    \r\n    return (\r\n        <Button variant=\"contained\" className=\"square\" style={styles} onClick={props.onClick}>\r\n                {props.value}\r\n        </Button>\r\n       \r\n    )\r\n}","import Square from \"./Square\";\r\nimport '../index.css';\r\n\r\nexport default function Board(props) {\r\n    \r\n    const renderSquare = (i) => {\r\n        return (\r\n            <Square\r\n                value={props.squares[i]}\r\n                onClick={() => props.onClick(i)}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport Board from './Board'\r\nimport '../index.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function Game() {\r\n\r\n    const [state, setState] = useState(\r\n        {\r\n            history: [{squares: Array(9).fill(null)}],\r\n            stepNumber: 0,\r\n            xIsNext: true\r\n        }\r\n    )\r\n    const turn = state.xIsNext ? 'X' : 'O';\r\n    const current = state.history[state.history.length - 1];\r\n    const winner = calculateWinner(current.squares);\r\n    const status = winner ? 'The winner is: ' + winner : 'Next player: ' + turn;\r\n\r\n    const moves = state.history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n        \r\n        const styles = {\r\n            color: \"#47d7df\",\r\n            fontSize: '1.5rem',\r\n            backgroundColor: \"#4793df\"\r\n        }\r\n      return (\r\n        <li key={move}>\r\n          <Button variant=\"contained\" style={styles} onClick={() => jumpTo(move)}>{desc}</Button>\r\n        </li>\r\n      );\r\n    });\r\n    \r\n    \r\n    const handleClick = (i) => {\r\n        const history = state.history.slice(0, state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squareList = current.squares.slice();\r\n        if (winner || current.squares[i]) {\r\n            return;\r\n        }\r\n        squareList[i] = turn\r\n        setState({\r\n            history: history.concat([{squares: squareList}]),\r\n            stepNumber: history.length,\r\n            xIsNext: !state.xIsNext\r\n        })\r\n    }\r\n    \r\n    const jumpTo = (step) => {\r\n        setState({\r\n            history: state.history.slice(0, step + 1),\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={handleClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nconst calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n            }\r\n        }\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/Game';\r\nimport './index.css';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}